colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
chart_link = plotly_POST(p, filename="choropleth/ag")
chart_link
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
p
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
p <- plot_geo(df, locationmode = 'Madrid') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
g <- list(
scope = 'spain',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'Madrid') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
library(plotly)
data(mtcars)
library(plotly)
data(mtcars)
p <- plot_ly(mtcars, x = ~am, color = ~am, type = "box")
p
library(plotly)
library(quantmod)
getSymbols("AAPL",src='yahoo')
df <- data.frame(Date=index(AAPL),coredata(AAPL))
df <- tail(df, 30)
p <- df %>%
plot_ly(x = ~Date, type="candlestick",
open = ~AAPL.Open, close = ~AAPL.Close,
high = ~AAPL.High, low = ~AAPL.Low) %>%
layout(title = "Basic Candlestick Chart")
p
getSymbols("AAPL",src='yahoo')
df <- data.frame(Date=index(AAPL),coredata(AAPL))
df <- tail(df, 30)
p <- df %>%
plot_ly(x = ~Date, type="ohlc",
open = ~AAPL.Open, close = ~AAPL.Close,
high = ~AAPL.High, low = ~AAPL.Low) %>%
layout(title = "Basic OHLC Chart")
p
packageVersion('plotly')
getSymbols("AAPL",src='yahoo')
df <- data.frame(Date=index(AAPL),coredata(AAPL))
df <- tail(df, 30)
p <- df %>%
plot_ly(x = ~Date, type="ohlc",
open = ~AAPL.Open, close = ~AAPL.Close,
high = ~AAPL.High, low = ~AAPL.Low) %>%
layout(title = "Basic OHLC Chart")
p
htmlwidgets::saveWidget(as.widget(p), file = "demo.html")
packageVersion('plotly')
df <- data.frame(Date=index(AAPL),coredata(AAPL))
# annotation
a <- list(text = "Stock Split",
x = '2014-06-06',
y = 1.02,
xref = 'x',
yref = 'paper',
xanchor = 'left',
showarrow = FALSE
)
# use shapes to create a line
l <- list(type = line,
x0 = '2014-06-06',
x1 = '2014-06-06',
y0 = 0,
y1 = 1,
xref = 'x',
yref = 'paper',
line = list(color = 'black',
width = 0.5)
)
p <- df %>%
plot_ly(x = ~Date, type="ohlc",
open = ~AAPL.Open, close = ~AAPL.Close,
high = ~AAPL.High, low = ~AAPL.Low) %>%
layout(title = "Apple Stock",
annotations = a,
shapes = l)
p
p
library(igraph)
install.packages("igraph")
library(plotly)
library(igraph)
data(karate, package="igraphdata")
G <- upgrade_graph(karate)
L <- layout.circle(G)
vs <- V(G)
es <- as.data.frame(get.edgelist(G))
Nv <- length(vs)
Ne <- length(es[1]$V1)
Xn <- L[,1]
Yn <- L[,2]
install.packages("igraphdata")
library(plotly)
library(igraph)
data(karate, package="igraphdata")
G <- upgrade_graph(karate)
L <- layout.circle(G)
vs <- V(G)
es <- as.data.frame(get.edgelist(G))
Nv <- length(vs)
Ne <- length(es[1]$V1)
Xn <- L[,1]
Yn <- L[,2]
network <- plot_ly(x = ~Xn, y = ~Yn, mode = "markers", text = vs$label, hoverinfo = "text")
edge_shapes <- list()
for(i in 1:Ne) {
v0 <- es[i,]$V1
v1 <- es[i,]$V2
edge_shape = list(
type = "line",
line = list(color = "#030303", width = 0.3),
x0 = Xn[v0],
y0 = Yn[v0],
x1 = Xn[v1],
y1 = Yn[v1]
)
edge_shapes[[i]] <- edge_shape
}
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
p <- layout(
network,
title = 'Karate Network',
shapes = edge_shapes,
xaxis = axis,
yaxis = axis
)
p
chart_link = plotly_POST(p, filename="dpw3/network")
Sys.setenv("plotly_username"="m20ro")
Sys.setenv("plotly_api_key"="4JVGvT0BvWgC4e7uOfJr")
library(plotly)
chart_link = plotly_POST(p, filename="dpw3/network")
chart_link = plotly_POST(p, filename="network")
chart_link
shiny::runApp('Documents/COURSERA/DATA_SCIENCE_SPECIALIZATION/9_Data_products/final project/german-credit')
url="http://freakonometrics.free.fr/german_credit.csv"
credit=read.csv(url, header = TRUE, sep = ",")
dim(credit)
View(head(credit))
table(credit$Creditability)
nzv <- nearZeroVar(credit)
credit_nzv <- credit[, -nzv]
library(caret)
nzv <- nearZeroVar(credit)
credit_nzv <- credit[, -nzv]
nzv
colnames(credit)[nzv]
colnames(credit_nzv)[nzv]
hcorr <- findCorrelation(credit_nzv, cutoff = .75)
hcorr <- findCorrelation(cor(credit_nzv), cutoff = .75)
credit_nzv_corr <- credit_nzv[,-hcorr]
hcorr <- findCorrelation(cor(credit_nzv), cutoff = .85)
credit_nzv_corr <- credit_nzv[,-hcorr]
hcorr
credit_nzv_corr <- credit_nzv[,-hcorr]
credit_cor <- cor(credit_nzv)
credit_cor
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(credit_nzv)), fill=value, geom="tile")
credit_cor <- cor(credit_nzv)
credit_cor
highlyCorDescr <- findCorrelation(credit_cor, cutoff = .75)
filteredDescr <- filteredDescr[,-highlyCorDescr]
filteredDescr <- credit_cor[,-highlyCorDescr]
filteredDescr
filteredDescr <- credit_nzv[,-highlyCorDescr]
credit_cor <- cor(credit_nzv)
credit_cor
highlyCorDescr <- findCorrelation(credit_cor, cutoff = .75)
filteredDescr <- credit_nzv[,-highlyCorDescr]
table(credit$Creditability)
filteredDescr
View(credit_cor)
highlyCorDescr
filteredDescr <- credit_nzv[,-0]
len(highlyCorDescr)
length(highlyCorDescr)
credit_cor <- cor(credit_nzv)
highlyCorDescr <- findCorrelation(credit_cor, cutoff = .75)
if(length(highlyCorDescr) > 0){
credit_nzv_corr <- credit_nzv[,-highlyCorDescr]
} else credit_nzv_corr <- credit_nzv
trainIndex <- createDataPartition(credit$Creditability, p = .7, list = FALSE, times = 1)
creditTrain <- credit[ trainIndex,]
creditTest  <- credit[-trainIndex,]
nzv <- nearZeroVar(creditTrain)
credit_nzv <- creditTrain[, -nzv]
credit_cor <- cor(credit_nzv)
highlyCorDescr <- findCorrelation(credit_cor, cutoff = .75)
if(length(highlyCorDescr) > 0){
credit_nzv_corr <- credit_nzv[,-highlyCorDescr]
} else credit_nzv_corr <- credit_nzv
comboInfo <- findLinearCombos(ltfrDesign)
comboInfo <- findLinearCombos(credit_nzv_corr)
comboInfo$remove
comboInfo$linearCombos
if(length(comboInfo$remove) > 0){
credit_lc <- credit_nzv_corr[, -comboInfo$remove]
} else credit_lc <- credit_nzv_corr
rf_model<-train(Creditability~.,data=credit_lc,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
fitForet <- predict(rf_model, newdata=creditTest, type="prob")[,2]
rf_model<-train(factor(Creditability)~.,data=credit_lc,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
print(rf_model)
fitForet <- predict(rf_model, newdata=creditTest, type="prob")[,2]
pred = prediction( fitForet, creditTest$Creditability[i_test])
pred = prediction( fitForet, creditTest$Creditability)
library(randomForest)
pred = prediction( fitForet, creditTest$Creditability)
pred
fitForet
trellis.par.set(caretTheme())
cal_obj <- calibration(factor(Creditability) ~ rf_model,
data = credit_lc,
cuts = 13)
plot(cal_obj, type = "l", auto.key = list(columns = 3,
lines = TRUE,
points = FALSE))
plot(cal_obj, type = "l", auto.key = list(columns = 1,
lines = TRUE,
points = FALSE))
colnames(credit_lc)
for(c in colnames(credit_lc)){
print(c)
}
fitForet <- predict(rf_model, newdata=creditTest, type="prob")[,2]
for(c in colnames(credit_lc)){
print(c)
}
print(c, "lol")
for(c in colnames(credit_lc)){
print(c, "lol")
}
for(c in colnames(credit_lc)){
print(paste(c, "lol"))
}
for(c in colnames(credit_lc)){
print(paste(c, levels(credit_lc[c])))
}
for(c in colnames(credit_lc)){
levels(credit_lc[c])
}
for(c in colnames(credit_lc)){
print(levels(credit_lc[c]))
}
credit_lc[colnames(credit_lc)[[1]]]
levels(credit_lc[colnames(credit_lc)[[1]]])
for(c in colnames(credit_lc)){
print(levels(credit_lc[c]))
}
credit_lc[colnames(credit_lc)[[1]]]
table(credit_lc[colnames(credit_lc)[[1]]])
table(credit_lc[colnames(credit_lc)[[2]]])
table(credit_lc[colnames(credit_lc)[[3]]])
table(credit_lc[colnames(credit_lc)[[4]]])
table(credit_lc[colnames(credit_lc)[[5]]])
for(c in colnames(credit_lc)){
print(c)
table(credit_lc[c])
}
for(c in colnames(credit_lc)){
print(c)
print(table(credit_lc[c]))
}
shiny::runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
install.packages("shinydashboard")
library(shinydashboard)
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
install.packages("shiny.semantic")
devtools::install_github("Appsilon/shiny.semantic")
library(shiny.semantic)
install.packages("shinyjs")
shiny::runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('risk/fdm2ds_2017/MARTA')
runApp('test.R')
runApp('test.R')
install.packages("highlighter")
shiny::runApp('risk/fdm2ds_2017/MARTA')
require(xlsReadWrite)
install.packages("xlsReadWrite")
xls.getshlib()
require(xlsReadWrite)
xls.getshlib()
df1 = read.xls("~/Downloads/inece033213.xls", sheet = 2)
df2 = read.xls("~/Downloads/inece033213.xls", sheet = 3)
install.packages("XLConnect")
require(XLConnect)
wb = loadWorkbook("~/Downloads/inece033213.xls")
df = readWorksheet(wb, sheet = "Full 2", header = TRUE)
df2 = readWorksheet(wb, sheet = "Full 3", header = TRUE)
View(df)
df$Col2
var <- df$Col2
var <- df$Col2
var2 <- df2$Col2
var
var2
remove <- c (NA, "", "Total")
var <- df$Col2
var <- var [! var %in% remove]
var2 <- df2$Col2
var2 <- var2 [! var2 %in% remove]
var
var2
dff <- data.frame(cat=var, esp=var2)
dff
dff <- data.frame("cat"=var, "esp"=var2)
length(var)
length(var2)
var_ <- head(var, n=length(var)-length(var2))
var_
length(var)-length(var2)
remove <- c (NA, "", "Total")
var <- df$Col2
var <- var [! var %in% remove]
var2 <- df2$Col2
var2 <- var2 [! var2 %in% remove]
var <- head(var, n=length(var2))
dff <- data.frame(cat=var, esp=var2)
dff
View(dff)
dff$idu <- row.names(dff)
View(dff)
ggplot(data=dff, aes(x=idu, y=cat)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21))
library(ggplot2)
ggplot(data=dff, aes(x=idu, y=cat)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21))
ggplot(data=dff, aes(x=idu, y=cat, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21))
library(ggplot2)
ggplot(data=dff, aes(x=idu, y=esp, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21))
remove <- c (NA, "", "Total")
var <- df$Col2
var <- var [! var %in% remove]
var2 <- df2$Col2
var2 <- var2 [! var2 %in% remove]
var <- head(var, n=length(var2))
dff1 <- data.frame(var=var, type="cat")
dff1 <- dff1[rev(rownames(dff1)),]
dff1$idu <- row.names(dff1)
dff2 <- data.frame(var=var2, type="esp")
dff2 <- dff2[rev(rownames(dff2)),]
dff2$idu <- row.names(dff2)
dfjoin <- rbind(dff1, dff2)
View(dfjoin)
ggplot(data=dfjoin, aes(x=idu, y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point()
dfjoin_ord <- dfjoin[order(idu),]
dfjoin_ord <- dfjoin[order(dfjoin$idu),]
ggplot(data=dfjoin_ord, aes(x=idu, y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point()
dfjoin_ord <- dfjoin[order(dfjoin$type,dfjoin$idu),]
ggplot(data=dfjoin_ord, aes(x=idu, y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point()
ggplot(data=dfjoin_ord, aes(x=idu, y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point() +
scale_x_discrete(limits=c(1,32))
ggplot(data=dfjoin_ord, aes(x=factor(idu), y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point() +
scale_x_discrete(limits=c(1,4,6))
ggplot(data=dfjoin_ord, aes(x=factor(idu), y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point()
ggplot(data=dfjoin_ord, aes( y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point()
ggplot(data=dff1, aes(x=idu, y=var, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21))
ggplot(data=dff1, aes(x=idu, y=var, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21)) + ggtitle("Variación trimestral. Cataluña")
ggplot(data=dff2, aes(x=idu, y=var, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21)) + ggtitle("Variación trimestral. España")
ggplot(data=dff1[order(dff1$idu)], aes(x=idu, y=var, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21)) + ggtitle("Variación trimestral. Cataluña")
ggplot(data=dff1[order(dff1$idu),], aes(x=idu, y=var, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21)) + ggtitle("Variación trimestral. Cataluña")
dff1[order(dff1$idu),]
var <- df$Col2
var <- var [! var %in% remove]
var2 <- df2$Col2
var2 <- var2 [! var2 %in% remove]
var <- head(var, n=length(var2))
dff1 <- data.frame(var=var, type="cat")
dff1 <- dff1[rev(rownames(dff1)),]
View(dff1)
dff1 <- dff1[rev(rownames(dff1)),]
View(dff1)
dff1$idu <- row.names(dff1)
View(dff1)
ggplot(data=dff1, aes(x=idu, y=var, group=1)) +
geom_line(size=1.5) +
geom_point(size=3, fill="white") +
scale_shape_manual(values=c(22,21)) + ggtitle("Variación trimestral. Cataluña")
ggplot()+geom_line(x=dff1$idu, y=dff1$var)
ggplot(aes(x=dff1$idu, y=dff1$var))+geom_line()
ggplot(data=dff1, aes(x=idu, y=var, group=1)) +
geom_line() +
geom_point() +
expand_limits(y=0) +
xlab("Time of day") + ylab("Total bill") +
ggtitle("Average bill for 2 people")
dff1$idu <- as.numeric(dff1$idu)
ggplot(data=dff1, aes(x=idu, y=var, group=1)) +
geom_line() +
geom_point() +
expand_limits(y=0) +
xlab("Time of day") + ylab("Total bill") +
ggtitle("Average bill for 2 people")
dff2 <- data.frame(var=var2, type="esp")
dff2 <- dff2[rev(rownames(dff2)),]
dff2$idu <- row.names(dff2)
dff2$idu <- as.numeric(dff2$idu)
dfjoin <- rbind(dff1, dff2)
ggplot(data=dfjoin, aes(x=factor(idu), y=var, group=type, shape=type, color=type)) +
geom_line() +
geom_point()
shiny::runApp('Documents/COURSERA/DATA_SCIENCE_SPECIALIZATION/9_Data_products/final project/german-credit')
